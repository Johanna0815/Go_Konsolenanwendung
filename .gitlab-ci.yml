variables:
  GOLANGCI_LINT_VERSION: 'v1.54.2'

image: golang:1.13  

stages:
  - build
  - test
  - deploy 

# Build-Job
build-job:
  stage: build
  script:
    - echo "Building the Go application..."
    - go mod tidy || true  # Falls 'go mod' in 1.13 nicht verwendet wird, wird der Fehler ignoriert
    - go build -o go_calculator .  # Build der Anwendung
  artifacts:
    when: always
    paths:
      - go_calculator  # Speichert das gebaute Artefakt

# Test-Job
unit-test-job:
  stage: test
  script:
    - echo "Running unit tests..."
    - go test ./... -v > test_results.out  # Führe Tests aus und speichere das Ergebnis
    - cat test_results.out  # Zeige das Testergebnis in der Konsole an
  artifacts:
    when: always
    paths:
      - test_results.out
    reports:
      junit: test_results.out  # (optional) Hier wird der Testbericht gespeichert, obwohl go test keine native JUnit-Unterstützung hat
    # reports:
   #   junit: test-results.xml

lint-job:
  image: golangci/golangci-lint:$GOLANGCI_LINT_VERSION
  stage: test
  script:
    # Run golangci-lint and create a code quality report in the Code Climate format
    - echo "Running golangci-lint..."
    - golangci-lint run --issues-exit-code 0 --print-issued-lines=false --out-format code-climate > gl-code-quality-report.json
  artifacts:
    reports:
      codequality: gl-code-quality-report.json
    paths:
      - gl-code-quality-report.json




# Deployment-Job
deploy-job:
  stage: deploy
  script:
    - echo "Deploying application..."
    - echo "Deployment complete."



